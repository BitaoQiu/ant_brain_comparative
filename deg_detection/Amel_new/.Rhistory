library(base)
library(tximport)
library('DESeq2')
aech_files = c(paste('Amel',c(1:6),sep ='_'))
files <- file.path('quants', aech_files, "quant.sf")
names(files) <- aech_files
tx2gene <- read.csv('Amel.t2g.txt',header = F, sep = '\t')
View(tx2gene)
tx2gene <- read.csv('Amel.t2g.txt',header = F, sep = '\t',skip = 1)
View(tx2gene)
tx2gene$V1 = toupper(tx2gene$V1)
files
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene,
countsFromAbundance = 'lengthScaledTPM')
batch = factor(c(rep(c('worker','gyne'),each =3 )))#,     c('minor','gyne','minor','gyne')))
sampleTable <- data.frame(condition = batch)#,     type = c(rep('A',15),rep('B',4)))
rownames(sampleTable) <- colnames(txi.salmon$counts)
dds <- DESeqDataSetFromTximport(txi.salmon, sampleTable,
~condition)# + type )
dds <- DESeq(dds)
res <- results(dds, c('condition','gyne','worker'))
gyne_bias = rownames(res[which(res$padj < 0.01 & res$log2FoldChange > 0),])
worker_bias = rownames(res[which(res$padj < 0.01 & res$log2FoldChange < 0),])
summary(res)
library("pheatmap")
filter = rownames(dds[which(rowMax(counts(dds)) > 5),])
abundance = txi.salmon$abundance[which(row.names(txi.salmon$abundance) %in% filter),] + 0.01
gene_age = read.table('../../synteny_seven//Amel_age.txt',header = T)
gene_age$age = as.character(gene_age$age)
head(tx2gene)
gene_age$geneID = as.tx2gene$V2[match(rownames(gene_age),tx2gene$V1)]
gene_age$geneID = as.character(tx2gene$V2[match(rownames(gene_age),tx2gene$V1)])
gene_age = gene_age[which(gene_age$geneID %in% filter),]
tx2gene$V2
tx2gene$V1
gene_age = gene_age[which(gene_age$geneID %in% filter),]
gene_age$age
levels(gene_age$age)
factor(gene_age$age)
gene_age$age = factor(gene_age$age,
levels = c('neoptera','endopterygota','hymenoptera','aprocrita','aculeata','apoidea','TRG'))
gene_age$caste = 'non-bias'
gene_age$caste[gene_age$geneID %in% gyne_bias] = 'gyne'
gene_age$caste[gene_age$geneID %in% worker_bias] = 'worker'
gene_age$caste = factor(gene_age$caste, levels = c('gyne','worker','non-bias'))
write.table(as.data.frame(table(gene_age$caste,gene_age$age)),'Amel_age_odd.csv',sep = '\t',quote = F)
as.data.frame(table(gene_age$caste,gene_age$age))
